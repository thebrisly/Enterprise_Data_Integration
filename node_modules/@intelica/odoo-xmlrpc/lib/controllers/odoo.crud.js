"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdooCRUD = void 0;
class OdooCRUD {
    constructor(model, odoo, keys = []) {
        this._model = model;
        this._odoo = odoo;
        this._keys = keys;
    }
    count() {
        return new Promise((resolve, reject) => {
            const params = [this._model, "search_count", [[]]];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
    create(value) {
        return new Promise((resolve, reject) => {
            const params = [this._model, "create", [value]];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
    searchRead(query, limit = 10) {
        return new Promise((resolve, reject) => {
            const params = [
                this._model,
                "search_read",
                [query],
                { fields: this._keys, limit: limit }
            ];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
    read(ids) {
        return new Promise((resolve, reject) => {
            const params = [this._model, "read", ids, { fields: this._keys }];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
    update(id, data) {
        return new Promise((resolve, reject) => {
            const params = [this._model, "write", [[id], data]];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
    delete(id) {
        return new Promise((resolve, reject) => {
            const params = [this._model, "unlink", [[id]]];
            this._odoo
                .callRPC(params)
                .then((value) => {
                resolve(value);
            })
                .catch(reject);
        });
    }
}
exports.OdooCRUD = OdooCRUD;
//# sourceMappingURL=odoo.crud.js.map
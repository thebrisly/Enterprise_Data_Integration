"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Odoo = void 0;
const odoo_types_1 = require("../models/odoo.types");
const xmlrpc_1 = require("xmlrpc");
const errors_enum_1 = require("../constants/errors.enum");
const contacts_odoo_1 = require("./contacts.odoo");
const employees_odoo_1 = require("./employees.odoo");
const leads_odoo_1 = require("./leads.odoo");
const categories_odoo_1 = require("./categories.odoo");
class Odoo {
    constructor(host, port = 443) {
        this._client = (0, xmlrpc_1.createSecureClient)({
            host: host,
            port: port
        });
    }
    _commonPath() {
        this._client.options.path = "/xmlrpc/2/common";
    }
    _objectPath() {
        this._client.options.path = "/xmlrpc/2/object";
    }
    version() {
        return new Promise((resolve, reject) => {
            this._commonPath();
            this._client.methodCall("version", [], (error, value) => {
                error ? reject(error) : resolve(value);
            });
        });
    }
    authenticate(db, username, password) {
        return new Promise((resolve, reject) => {
            this._db = db;
            this._password = password;
            this._commonPath();
            this._client.methodCall("authenticate", [db, username, password, {}], (error, value) => {
                if (error) {
                    return reject(error);
                }
                if (!value) {
                    return reject({ boError: errors_enum_1.ERRORS.INVALID_CREDENTIALS });
                }
                this._uid = value;
                resolve(value);
            });
        });
    }
    callRPC(params) {
        return new Promise((resolve, reject) => {
            this._objectPath();
            const opts = [this._db, this._uid, this._password, ...params];
            this._client.methodCall("execute_kw", opts, (error, value) => {
                error ? reject(error) : resolve(value);
            });
        });
    }
    getModelActions(model) {
        switch (model) {
            case odoo_types_1.MODEL_TYPE.CONTACTS:
                return new contacts_odoo_1.Contacts(this);
            case odoo_types_1.MODEL_TYPE.LEAD_OPPORTUNITY:
                return new leads_odoo_1.Leads(this);
            case odoo_types_1.MODEL_TYPE.EMPLOYEES:
                return new employees_odoo_1.Employees(this);
            case odoo_types_1.MODEL_TYPE.CATEGORIES:
                return new categories_odoo_1.Categories(this);
        }
        throw new Error("Invalid model type");
    }
}
exports.Odoo = Odoo;
//# sourceMappingURL=odoo.js.map